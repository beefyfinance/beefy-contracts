// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

import "../../interfaces/common/IUniswapRouterETH.sol";
import "../../interfaces/common/IUniswapV2Pair.sol";
import "../../interfaces/common/IRewardPool.sol";
import "../../utils/GasThrottler.sol";
import "../Common/StratManager.sol";
import "../Common/FeeManager.sol";

contract StrategyIcarusZ is StratManager, FeeManager, GasThrottler {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    // Tokens used
    address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address constant public busd = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    address constant public ica = address(0x0ca2f09eCa544b61b91d149dEA2580c455c564b2);
    address constant public eth = address(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);
    address constant public btc = address(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);
    address public want;

    // Third party contracts
    address public rewardPool;

    // Routes
    address[] public icaToWbnbRoute = [ica, busd, wbnb];
    address[] public btcToWbnbRoute = [btc, wbnb];
    address[] public ethToWbnbRoute = [eth, wbnb];
    address[] public wbnbToWantRoute;


    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    constructor(
        address _want,
        address _rewardPool,
        address _vault,
        address _unirouter,
        address _keeper,
        address _strategist,
        address _beefyFeeRecipient
    ) StratManager(_keeper, _strategist, _unirouter, _vault, _beefyFeeRecipient) public {
        want = _want;
        rewardPool = _rewardPool;

        wbnbToWantRoute = [wbnb, busd, want];

        _giveAllowances();
    }

    // puts the funds to work
    function deposit() public whenNotPaused {
        uint256 wantBal = IERC20(want).balanceOf(address(this));

        if (wantBal > 0) {
            IRewardPool(rewardPool).stake(wantBal);
        }
    }

    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 wantBal = IERC20(want).balanceOf(address(this));

        if (wantBal < _amount) {
            IRewardPool(rewardPool).withdraw(_amount.sub(wantBal));
            wantBal = IERC20(want).balanceOf(address(this));
        }

        if (wantBal > _amount) {
            wantBal = _amount;
        }

        if (tx.origin == owner() || paused()) {
            IERC20(want).safeTransfer(vault, wantBal);
        } else {
            uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(WITHDRAWAL_MAX);
            IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));
        }
    }

    // compounds earnings and charges performance fee
    function harvest() external whenNotPaused gasThrottle {
        IRewardPool(rewardPool).getReward();
        swapRewards();
        chargeFees();
        swapToWant();
        deposit();

        emit StratHarvest(msg.sender);
    }

    // swap everything to wbnb
    function swapRewards() internal {
        uint256 icaBal = IERC20(ica).balanceOf(address(this));
        if (icaBal > 0) {
            IUniswapRouterETH(unirouter).swapExactTokensForTokens(icaBal, 0, icaToWbnbRoute, address(this), now);
        }

        uint256 btcBal = IERC20(btc).balanceOf(address(this));
        if (btcBal > 0) {
            IUniswapRouterETH(unirouter).swapExactTokensForTokens(btcBal, 0, btcToWbnbRoute, address(this), now);
        }

        uint256 ethBal = IERC20(eth).balanceOf(address(this));
        if (ethBal > 0) {
            IUniswapRouterETH(unirouter).swapExactTokensForTokens(ethBal, 0, ethToWbnbRoute, address(this), now);
        }
    }

    // performance fees
    function chargeFees() internal {
        uint256 wbnbFeeBal = IERC20(wbnb).balanceOf(address(this)).mul(45).div(1000);

        uint256 callFeeAmount = wbnbFeeBal.mul(callFee).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(msg.sender, callFeeAmount);

        uint256 beefyFeeAmount = wbnbFeeBal.mul(beefyFee).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(beefyFeeRecipient, beefyFeeAmount);

        uint256 strategistFee = wbnbFeeBal.mul(STRATEGIST_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(strategist, strategistFee);
    }

    // swap wbnb to get more 'want' tokens.
    function swapToWant() internal {
        uint256 wbnbBal = IERC20(wbnb).balanceOf(address(this));
        IUniswapRouterETH(unirouter).swapExactTokensForTokens(wbnbBal, 0, wbnbToWantRoute, address(this), now);
    }

    // calculate the total underlaying 'want' held by the strat.
    function balanceOf() public view returns (uint256) {
        return balanceOfWant().add(balanceOfPool());
    }

    // it calculates how much 'want' this contract holds.
    function balanceOfWant() public view returns (uint256) {
        return IERC20(want).balanceOf(address(this));
    }

    // it calculates how much 'want' the strategy has working in the farm.
    function balanceOfPool() public view returns (uint256) {
        return IRewardPool(rewardPool).balanceOf(address(this));
    }

    // called as part of strat migration. Sends all the available funds back to the vault.
    function retireStrat() external {
        require(msg.sender == vault, "!vault");

        IRewardPool(rewardPool).withdraw(balanceOfPool());

        uint256 wantBal = IERC20(want).balanceOf(address(this));
        IERC20(want).transfer(vault, wantBal);
    }

    // pauses deposits and withdraws all funds from third party systems.
    function panic() public onlyManager {
        pause();
        IRewardPool(rewardPool).withdraw(balanceOfPool());
    }

    function pause() public onlyManager {
        _pause();

        _removeAllowances();
    }

    function unpause() external onlyManager {
        _unpause();

        _giveAllowances();

        deposit();
    }

    function _giveAllowances() internal {
        IERC20(want).safeApprove(rewardPool, uint256(-1));
        IERC20(ica).safeApprove(unirouter, uint256(-1));
        IERC20(btc).safeApprove(unirouter, uint256(-1));
        IERC20(eth).safeApprove(unirouter, uint256(-1));
        IERC20(wbnb).safeApprove(unirouter, uint256(-1));
    }

    function _removeAllowances() internal {
        IERC20(want).safeApprove(rewardPool, 0);
        IERC20(ica).safeApprove(unirouter, 0);
        IERC20(btc).safeApprove(unirouter, 0);
        IERC20(eth).safeApprove(unirouter, 0);
        IERC20(wbnb).safeApprove(unirouter, 0);
    }
}