// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

import "../../interfaces/common/IUniswapRouterETH.sol";
import "../../interfaces/pancake/ISmartChef.sol";

/**
 * @dev Implementation of a strategy to get yields from selectively farming the most profitable CAKE pool.
 * PancakeSwap is an automated market maker (“AMM”) that allows two tokens to be exchanged on the Binance Smart Chain.
 * It is fast, cheap, and allows anyone to participate.
 *
 * The strategy simply deposits whatever funds it receives from the vault into the selected pool (SmartChef). 
 * Rewards generated by the SmartChef can be harvested, swapped for more CAKE, and deposited again for compound farming.
 * When harvesting you can select a poolId to deposit the funds in any whitelisted pool after each harvest.
 *
 * Whitelisted pools can be added by the owner with a delay of 2 days before being approved as a harvest target.
 */

contract StrategyCakeSmart is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /**
     * @dev Pool Management Data Structures
     * Pool - Struct for pools that have been approved and are ready to be used. 
     * UpcomingPool - Struct for pools that have not been approved. Have to wait for {approvalDelay} after their proposedTime.
     */
    struct Pool {
        address smartchef;
        address output;
        bool enabled;
    }

    struct UpcomingPool {
        address smartchef;
        uint256 proposedTime;
        bool addedToPools;
    }

    /**
     * @dev Pool Management Variables
     * pools - Holds all the pools that have been approved for harvest. Pools can be enabled/disabled by owner.
     * upcomingPools - Holds the pools that have been proposed to eventually be approved. Once approved, they get flagged and not deleted.
     * currentPool - The pool where funds are currently working. 
     * approvalDelay - Seconds that have to pass before an upcoming pool can be approved.
     */
    Pool[] public pools;
    UpcomingPool[] public upcomingPools;
    uint8 public currentPool;
    uint256 public approvalDelay;

    /**
     * @dev Pool Management Events 
     * AddUpcomingPool - fired when a new pool is initially proposed.
     * ApprovePool - fired when the pool is made available for harvesting. 
     */
    event AddUpcomingPool(address smartchef);
    event ApprovePool(address smartchef);

    /**
     * @dev Tokens Used:
     * {wbnb} - Required for liquidity routing when doing swaps.
     * {cake} - Token that the strategy maximizes. The same token that users deposit in the vault.
     * {bifi} - BeefyFinance token, used to send funds to the treasury.
     * {output} - Token generated by staking CAKE. Changes depending on the selected pool.
     */
    address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address constant public cake = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);
    address constant public bifi = address(0xCa3F508B8e4Dd382eE878A314789373D80A5190A);
    address public output;

    /**
     * @dev Third Party Contracts:
     * {unirouter} - PancakeSwap unirouter
     * {smartchef} - Currently selected SmartChef contract. Stake CAKE, get {output} token.
     */
    address constant public unirouter = address(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);
    address public smartchef;

    /**
     * @dev Beefy Contracts:
     * {rewards} - Reward pool where the strategy fee earnings will go.
     * {treasury} - Address of the BeefyFinance treasury
     * {vault} - Address of the vault that controls the strategy's funds.
     */
    address constant public rewards = address(0x453D4Ba9a2D594314DF88564248497F7D74d6b2C);
    address constant public treasury = address(0x4A32De8c248533C28904b24B4cFCFE18E9F2ad01);
    address public vault;

    /**
     * @dev Distribution of fees earned. This allocations relative to the % implemented on chargeFees().
     * Current implementation separates 6% for fees.
     *
     * {REWARDS_FEE} - 4% goes to BIFI holders through the {rewards} pool.
     * {CALL_FEE} - 0.5% goes to whoever executes the harvest function as gas subsidy.
     * {TREASURY_FEE} - 1.5% goes to the treasury.
     * {MAX_FEE} - Aux const used to safely calc the correct amounts.
     *
     * {WITHDRAWAL_FEE} - Fee taxed when a user withdraws funds. 10 === 0.1% fee.
     * {WITHDRAWAL_MAX} - Aux const used to safely calc the correct amounts.
     */
    uint constant public REWARDS_FEE = 667;
    uint constant public CALL_FEE = 83;
    uint constant public TREASURY_FEE = 250;
    uint constant public MAX_FEE = 1000;

    uint constant public WITHDRAWAL_FEE = 10;
    uint constant public WITHDRAWAL_MAX = 10000;

    /**
     * @dev Routes we take to swap tokens using PancakeSwap.
     * {outputToCakeRoute} - Route we take to get from {output} into {cake}.
     * {outputToWbnbRoute} - Route we take to get from {output} into {wbnb}.
     * {wbnbToBifiRoute} - Route we take to get from {wbnb} into {bifi}.
     */
    address[] public outputToCakeRoute;
    address[] public outputToWbnbRoute;
    address[] public wbnbToBifiRoute = [wbnb, bifi];

    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    /**
     * @dev Initializes the strategy with a pool whitelist and vault that it will use.
     */
    constructor(address _vault, uint256 _approvalDelay) public {
        vault = _vault;
        approvalDelay = _approvalDelay;

        _approvePool(0x90F995b9d46b32c4a1908A8c6D0122e392B3Be97);
        _approvePool(0xdc8c45b7F3747Ca9CaAEB3fa5e0b5FCE9430646b);
        _approvePool(0x9c4EBADa591FFeC4124A7785CAbCfb7068fED2fb);
        
        updatePoolInfo(0);
        
        IERC20(wbnb).safeApprove(unirouter, uint(-1));
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits cake in the selected smartchef to farm {output}.
     */
    function deposit() public whenNotPaused {
        uint256 cakeBal = IERC20(cake).balanceOf(address(this));

        if (cakeBal > 0) {
            IERC20(cake).safeApprove(smartchef, 0);
            IERC20(cake).safeApprove(smartchef, cakeBal);
            ISmartChef(smartchef).deposit(cakeBal);
        }
    }

    /**
     * @dev Withdraws funds and sends them back to the vault.
     * It withdraws {cake} from the SmartChef and returns it to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 cakeBal = IERC20(cake).balanceOf(address(this));

        if (cakeBal < _amount) {   
            ISmartChef(smartchef).withdraw(_amount.sub(cakeBal));
            cakeBal = IERC20(cake).balanceOf(address(this));
        }

        if (cakeBal > _amount) {
            cakeBal = _amount;    
        }
        
        uint256 _fee = cakeBal.mul(WITHDRAWAL_FEE).div(WITHDRAWAL_MAX);
        IERC20(cake).safeTransfer(vault, cakeBal.sub(_fee));
    }

    /**
     * @dev Core function of the strat, in charge of collecting and re-investing rewards.
     * 1. It claims rewards from the SmartChef
     * 2. It swaps the {output} token for {cake}
     * 3. It charges the system fee and sends it to BIFI stakers.
     * 4. It re-invests the remaining profits.
     */
    function harvest(uint8 poolId) public whenNotPaused {
        require(poolId < pools.length, "poolId out of bounds");
        require(pools[poolId].enabled, "!enabled.");
        require(!Address.isContract(msg.sender), "!contract");

        // Optimizes gas usage by recycling the withdraw to get rewards.
        if (poolId != currentPool) {
            exitCurrentPool();
        } else {
            ISmartChef(smartchef).deposit(0);
        }

        chargeFees();
        swapRewards();

        if (poolId != currentPool) {
            updatePoolInfo(poolId);
        } 

        deposit();

        emit StratHarvest(msg.sender);
    }

    /**
     * @dev Takes out 6% as system fees from the rewards. 
     * 0.5% -> Call Fee
     * 1.5% -> Treasury fee
     * 4% -> BIFI Holders
     */
    function chargeFees() internal {
        uint256 toWbnb = IERC20(output).balanceOf(address(this)).mul(6).div(100);
        IUniswapRouterETH(unirouter).swapExactTokensForTokens(toWbnb, 0, outputToWbnbRoute, address(this), now.add(600));
    
        uint256 wbnbBal = IERC20(wbnb).balanceOf(address(this));

        uint256 callFee = wbnbBal.mul(CALL_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(tx.origin, callFee);
        
        uint256 treasuryHalf = wbnbBal.mul(TREASURY_FEE).div(MAX_FEE).div(2);
        IERC20(wbnb).safeTransfer(treasury, treasuryHalf);
        IUniswapRouterETH(unirouter).swapExactTokensForTokens(treasuryHalf, 0, wbnbToBifiRoute, treasury, now.add(600));
        
        uint256 rewardsFee = wbnbBal.mul(REWARDS_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(rewards, rewardsFee);
    }

    /**
     * @dev Swaps whatever {output} it has for more cake.
     */
    function swapRewards() internal {
        uint256 outputBal = IERC20(output).balanceOf(address(this));
        IUniswapRouterETH(unirouter).swapExactTokensForTokens(outputBal, 0, outputToCakeRoute, address(this), now.add(600));
    }

    /**
     * @dev It allows an account to submit a new pool to be harvested. It will take {approvalDelay}
     * before it can actually be whitelisted and added as a harvest options. 
     */
    function addUpcomingPool(address _smartchef) public onlyOwner {
        upcomingPools.push(UpcomingPool({
            smartchef: _smartchef,
            proposedTime: block.timestamp,
            addedToPools: false
        }));

        emit AddUpcomingPool(_smartchef);
    } 

    /**
     * @dev It approves an upcomingPool and makes it available for harvesting.
     */
    function approvePool(uint8 poolId) external onlyOwner {
        require(poolId < upcomingPools.length, "Pool out of bounds");   

        UpcomingPool storage upcomingPool = upcomingPools[poolId];
        require(upcomingPool.proposedTime.add(approvalDelay) < now, "Delay hasn't fully ocurred");
        require(!upcomingPool.addedToPools, "Pool already added");

        upcomingPool.addedToPools = true;
        _approvePool(upcomingPool.smartchef);
    }

    /**
     * @dev Function to add a pool without validations. Used from the constructor and by approvePool().
     */
    function _approvePool(address _smartchef) internal {
        address _output = ISmartChef(_smartchef).rewardToken();
        
        IERC20(_output).safeApprove(unirouter, 0);
        IERC20(_output).safeApprove(unirouter, uint(-1));

        pools.push(Pool({ 
            smartchef: _smartchef, 
            output: _output,
            enabled: true 
        }));

        emit ApprovePool(_smartchef);
    }

    /**
     * @dev Serves as a quick off buton in case of necessity once a pool has already been added.
     */
    function disablePool(uint8 poolId) external onlyOwner {
        Pool storage pool = pools[poolId];
        pool.enabled = false;
    }

    /**
     * @dev Serves as a quick on buton in case of necessity once a pool has already been added.
     */
    function enablePool(uint8 poolId) external onlyOwner {
        Pool storage pool = pools[poolId];
        pool.enabled = true;
    }

    /**
     * @dev It withdraws the funds from the current pool. It triggers the rewards during harvest too. 
    */
    function exitCurrentPool() internal {
        address _smartchef = pools[currentPool].smartchef;
        ISmartChef(_smartchef).withdraw(balanceOfPool());
    }

    function updatePoolInfo(uint8 poolId) internal {
        require(poolId < pools.length, "poolId out of bounds");

        currentPool = poolId;
        output = pools[poolId].output;
        smartchef = pools[poolId].smartchef;

        outputToCakeRoute = [output, wbnb, cake];
        outputToWbnbRoute = [output, wbnb];
    }

    /**
     * @dev Can only be called at the end of a strat lifecycle to prepare for migration. It should be called once 
     * a strat candidate is ready to be approved in the strat's vault. It sends all the available funds back to the 
     * vault, ready to be migrated to the new strat. It withdraws the funds without the rewards to have the less risk possible. 
     * If desired, you can harvest first and then call this function.
     */ 
    function retireStrat() external onlyOwner {
        stopWork();

        uint256 cakeBal = IERC20(cake).balanceOf(address(this));
        IERC20(cake).transfer(vault, cakeBal);
    }

    /**
     * @dev Withdraws all funds from the current SmartChef, leaving rewards behind.
     */
    function stopWork() public onlyOwner {
        _pause();
        ISmartChef(smartchef).emergencyWithdraw();
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() external onlyOwner {
        _pause();
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();
    }

    /**
     * @dev Helper function for UIs to know how many pools there are.
     */
    function poolsLength() external view returns (uint256) {
        return pools.length;
    }

    /**
     * @dev Helper function for UIs to know how many upcoming pools there are.
     */
    function upcomingPoolsLength() external view returns (uint256) {
        return upcomingPools.length;
    }

    /**
     * @dev Function to calculate the total underlaying {cake} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in the current SmartChef.
     */
    function balanceOf() public view returns (uint256) {
        return balanceOfCake().add(balanceOfPool());
    }

    /**
     * @dev It calculates how much cake the contract holds.
     */
    function balanceOfCake() public view returns (uint256) {
        return IERC20(cake).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much cake the strategy has allocated in the current SmartChef
     */
    function balanceOfPool() public view returns (uint256) {
        (uint256 _amount, ) = ISmartChef(smartchef).userInfo(address(this));
        return _amount;
    }
}