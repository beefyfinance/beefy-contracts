// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";

import "../../interfaces/hyperjump/IThugswapRouter.sol";
import "../../interfaces/hyperjump/IThugswapPair.sol";
import "../../interfaces/hyperjump/IHyperCity.sol";

/**
 * @dev Implementation of a strategy to get yields from farming LP Pools in StreetSwap.
 * 
 * This strat is currently compatible with all LP pools.
 */
contract StrategyHyperLP is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /**
     * @dev Tokens Used:
     * {wbnb} - Required for liquidity routing when doing swaps.
     * {alloy} - Token generated by staking our funds. In this case it's the ALLOY token.
     * {bifi} - BeefyFinance token, used to send funds to the treasury.
     * {lpPair} - Token that the strategy maximizes. The same token that users deposit in the vault.
     * {lpToken0, lpToken1} - Tokens that the strategy maximizes. IThugswapPair tokens
     */
    address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address constant public alloy = address(0x5eF5994fA33FF4eB6c82d51ee1DC145c546065Bd);
    address constant public hypr = address(0x03D6BD3d48F956D783456695698C407A46ecD54d);
    address constant public bifi = address(0xCa3F508B8e4Dd382eE878A314789373D80A5190A);
    address public lpPair;
    address public lpToken0;
    address public lpToken1;

    /**
     * @dev Third Party Contracts:
     * {unirouter} - Selected unirouter configured through constructor
     * {hypercity} - HyperCity contract
     * {poolId} - HyperCity pool id
     */
    address public unirouter;
    address constant public hypercity = address(0x4F1818Ff649498a2441aE1AD29ccF55a8E1C6250);
    uint8 public poolId;

    /**
     * @dev Beefy Contracts:
     * {rewards} - Reward pool where the strategy fee earnings will go.
     * {treasury} - Address of the BeefyFinance treasury
     * {vault} - Address of the vault that controls the strategy's funds.
     */
    address constant public rewards  = address(0x453D4Ba9a2D594314DF88564248497F7D74d6b2C);
    address constant public treasury = address(0x4A32De8c248533C28904b24B4cFCFE18E9F2ad01);
    address constant public hyperdao = address(0x62f4deb9895a95276b03E38ABea8b0B315e8C3c1);
    address public vault;

    /**
     * @dev Distribution of fees earned. This allocations relative to the % implemented on chargeFees().
     * Current implementation separates 6% for fees.
     *
     * {REWARDS_FEE} - 2% goes to BIFI holders through the {rewards} pool.
     * {CALL_FEE} - 0.5% goes to whoever executes the harvest function as gas subsidy.
     * {TREASURY_FEE} - 0.5% goes to the treasury.
     * {HYPER_FEE} - 1.5% goes to the hyper team.
     * {MAX_FEE} - Aux const used to safely calc the correct amounts.
     *
     * {WITHDRAWAL_FEE} - Fee taxed when a user withdraws funds. 10 === 0.1% fee.
     * {WITHDRAWAL_MAX} - Aux const used to safely calc the correct amounts.
     */
    uint constant public REWARDS_FEE  = 444;
    uint constant public CALL_FEE     = 111;
    uint constant public TREASURY_FEE = 111;
    uint constant public HYPER_FEE    = 334;
    uint constant public MAX_FEE      = 1000;

    uint constant public WITHDRAWAL_FEE = 10;
    uint constant public WITHDRAWAL_MAX = 10000;

    /**
     * @dev Routes we take to swap tokens using Thugswap.
     * {alloyToWbnbRoute} - Route we take to get from {alloy} into {wbnb}.
     * {wbnbToBifiRoute} - Route we take to get from {wbnb} into {bifi}.
     * {alloyToLp0Route} - Route we take to get from {alloy} into {lpToken0}.
     * {alloyToLp1Route} - Route we take to get from {alloy} into {lpToken1}.
     */
    address[] public alloyToWbnbRoute = [alloy, wbnb];
    address[] public wbnbToBifiRoute = [wbnb, bifi];
    address[] public wbnbToHyprRoute = [wbnb, hypr];
    address[] public alloyToLp0Route;
    address[] public alloyToLp1Route;

    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    /**
     * @dev Initializes the strategy with the token to maximize.
     */
    constructor(address _lpPair, uint8 _poolId, address _vault, address _unirouter) public {
        lpPair = _lpPair;
        lpToken0 = IThugswapPair(lpPair).token0();
        lpToken1 = IThugswapPair(lpPair).token1();
        poolId = _poolId;
        vault = _vault;
        unirouter = _unirouter;

        if (lpToken0 == wbnb) {
            alloyToLp0Route = [alloy, wbnb];
        } else if (lpToken0 != alloy) {
            alloyToLp0Route = [alloy, wbnb, lpToken0];
        }

        if (lpToken1 == wbnb) {
            alloyToLp1Route = [alloy, wbnb];
        } else if (lpToken1 != alloy) {
            alloyToLp1Route = [alloy, wbnb, lpToken1];
        }

        IERC20(lpPair).safeApprove(hypercity, uint(-1));
        IERC20(alloy).safeApprove(unirouter, uint(-1));
        IERC20(wbnb).safeApprove(unirouter, uint(-1));

        IERC20(lpToken0).safeApprove(unirouter, 0);
        IERC20(lpToken0).safeApprove(unirouter, uint(-1));

        IERC20(lpToken1).safeApprove(unirouter, 0);
        IERC20(lpToken1).safeApprove(unirouter, uint(-1));
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits {lpPair} in the HyperCity to farm {alloy}
     */
    function deposit() public whenNotPaused {
        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal > 0) {
            IHyperCity(hypercity).deposit(poolId, pairBal);
        }
    }

    /**
     * @dev Withdraws funds and sents them back to the vault.
     * It withdraws {lpPair} from the HyperCity.
     * The available {lpPair} minus fees is returned to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal < _amount) {   
            IHyperCity(hypercity).withdraw(poolId, _amount.sub(pairBal));
            pairBal = IERC20(lpPair).balanceOf(address(this));
        }

        if (pairBal > _amount) {
            pairBal = _amount;    
        }
        
        if (tx.origin == owner() || paused()) {
            IERC20(lpPair).safeTransfer(vault, pairBal);
        } else {
            uint256 withdrawalFee = pairBal.mul(WITHDRAWAL_FEE).div(WITHDRAWAL_MAX);
            IERC20(lpPair).safeTransfer(vault, pairBal.sub(withdrawalFee));
        }
    }

    /**
     * @dev Core function of the strat, in charge of collecting and re-investing rewards.
     * 1. It claims rewards from the HyperCity.
     * 2. It charges the system fees to simplify the split.
     * 3. It swaps the {alloy} token for {lpToken0} & {lpToken1}
     * 4. Adds more liquidity to the pool.
     * 5. It deposits the new LP tokens.
     */
    function harvest() external whenNotPaused {
        require(!Address.isContract(msg.sender), "!contract");
        IHyperCity(hypercity).deposit(poolId, 0);
        chargeFees();
        addLiquidity();
        deposit();

        emit StratHarvest(msg.sender);
    }

    /**
     * @dev Takes out 6% as system fees from the rewards. 
     * 1.0% -> Call Fee
     * 1.0% -> Treasury fee
     * 4.0% -> BIFI Holders
     */
    function chargeFees() internal {
        uint256 toWbnb = IERC20(alloy).balanceOf(address(this)).mul(45).div(1000);
        IThugswapRouter(unirouter).swapExactTokensForTokens(toWbnb, 0, alloyToWbnbRoute, address(this), now.add(600));
        
        uint256 wbnbBal = IERC20(wbnb).balanceOf(address(this));

        uint256 callFee = wbnbBal.mul(CALL_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(msg.sender, callFee);

        uint256 treasuryHalf = wbnbBal.mul(TREASURY_FEE).div(MAX_FEE).div(2);
        IERC20(wbnb).safeTransfer(treasury, treasuryHalf);
        IThugswapRouter(unirouter).swapExactTokensForTokens(treasuryHalf, 0, wbnbToBifiRoute, treasury, now.add(600));

        uint256 rewardsFee = wbnbBal.mul(REWARDS_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(rewards, rewardsFee);
        
        uint256 hyperFee = wbnbBal.mul(HYPER_FEE).div(MAX_FEE);
        IThugswapRouter(unirouter).swapExactTokensForTokens(hyperFee, 0, wbnbToHyprRoute, hyperdao, now.add(600));
    }

    /**
     * @dev Swaps {alloy} for {lpToken0}, {lpToken1} & {wbnb} using ThugSwap.
     */
    function addLiquidity() internal { 
        uint256 alloyHalf = IERC20(alloy).balanceOf(address(this)).div(2);

        if (lpToken0 != alloy) {
            IThugswapRouter(unirouter).swapExactTokensForTokens(alloyHalf, 0, alloyToLp0Route, address(this), now.add(600));
        }

        if (lpToken1 != alloy) {
            IThugswapRouter(unirouter).swapExactTokensForTokens(alloyHalf, 0, alloyToLp1Route, address(this), now.add(600));
        }

        uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));
        uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));
        IThugswapRouter(unirouter).addLiquidity(lpToken0, lpToken1, lp0Bal, lp1Bal, 1, 1, address(this), now.add(600));
    }

    /**
     * @dev Function to synchronize AutoFarm balance of {lpPair}.
     * Can be called by the vault before minting shares.
     * No-op as underlying Auto strategy doesn't need to be synced
     */
    function updateBalance() public {}

    /**
     * @dev Function to calculate the total underlaying {lpPair} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in the HyperCity.
     */
    function balanceOf() public view returns (uint256) {
        return balanceOfLpPair().add(balanceOfPool());
    }

    /**
     * @dev It calculates how much {lpPair} the contract holds.
     */
    function balanceOfLpPair() public view returns (uint256) {
        return IERC20(lpPair).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much {lpPair} the strategy has allocated in the HyperCity
     */
    function balanceOfPool() public view returns (uint256) {
        (uint256 _amount, ) = IHyperCity(hypercity).userInfo(poolId, address(this));
        return _amount;
    }

    /**
     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the 
     * vault, ready to be migrated to the new strat.
     */ 
    function retireStrat() external {
        require(msg.sender == vault, "!vault");
        
        IHyperCity(hypercity).emergencyWithdraw(poolId);

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));
        IERC20(lpPair).transfer(vault, pairBal);
    }

    /**
     * @dev Pauses deposits. Withdraws all funds from the HyperCity, leaving rewards behind
     */
    function panic() public onlyOwner {
        pause();
        IHyperCity(hypercity).emergencyWithdraw(poolId);
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() public onlyOwner {
        _pause();

        IERC20(lpPair).safeApprove(hypercity, 0);
        IERC20(alloy).safeApprove(unirouter, 0);
        IERC20(wbnb).safeApprove(unirouter, 0);
        IERC20(lpToken0).safeApprove(unirouter, 0);
        IERC20(lpToken1).safeApprove(unirouter, 0);
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();
        
        IERC20(lpPair).safeApprove(hypercity, uint(-1));
        IERC20(alloy).safeApprove(unirouter, uint(-1));
        IERC20(wbnb).safeApprove(unirouter, uint(-1));

        IERC20(lpToken0).safeApprove(unirouter, 0);
        IERC20(lpToken0).safeApprove(unirouter, uint(-1));

        IERC20(lpToken1).safeApprove(unirouter, 0);
        IERC20(lpToken1).safeApprove(unirouter, uint(-1));
    }
}
